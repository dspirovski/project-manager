{"version":3,"sources":["components/projects/Projects.js","components/project-view/ProjectView.js","Routes.js","App.js","reportWebVitals.js","index.js"],"names":["Projects","props","generateId","Math","floor","random","Date","now","inputChange","event","preventDefault","setState","currentProject","state","target","name","value","addProject","description","projects","JSON","parse","localStorage","getItem","push","id","hours","setItem","stringify","alert","updateProject","project","isEditing","saveProject","index","findIndex","deleteProject","splice","this","className","onSubmit","type","onChange","autoComplete","placeholder","length","map","onClick","to","React","Component","ProjectView","countTotalHours","totalHours","hour","parseInt","amount","currentProjectHours","addTime","updateProjectsHours","deleteTime","bind","match","params","find","min","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7867b678.chunk.js","sourcesContent":["import React from 'react';\nimport './Projects.css';\nimport { Link } from 'react-router-dom';\n\nclass Projects extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      projects: [],\n      isEditing: false,\n      currentProject: {\n        name: '',\n        description: ''\n      }\n    }\n\n  }\n  // This will generate random ID number\n  generateId = () => {\n    return Math.floor(Math.random() * Math.floor(Math.random() * Date.now()));\n  }\n\n  // Take projects array from local storage\n  componentDidMount() {\n    const projects = JSON.parse(localStorage.getItem('projects'));\n    if (!projects) {\n      localStorage.setItem('projects', JSON.stringify(this.state.projects));\n    }\n    this.setState({ projects });\n  }\n\n  // This will update the state with new values\n  inputChange = (event) => {\n    event.preventDefault();\n    this.setState({\n      currentProject: { ...this.state.currentProject, [event.target.name]: event.target.value } // dynamically update currentProject property\n    });\n  }\n\n  // Take the values from input fields, push them to the locally, update the state\n  addProject = (event) => {\n    if (this.state.currentProject.name && this.state.currentProject.description !== \"\") {\n      event.preventDefault();\n      let projects = JSON.parse(localStorage.getItem('projects'));\n      projects.push(\n        {\n          id: this.generateId(),\n          name: this.state.currentProject.name,\n          description: this.state.currentProject.description,\n          hours: []\n        }\n      );\n      localStorage.setItem('projects', JSON.stringify(projects));\n      this.setState({ projects, currentProject: { name: '', description: '' } });\n    }\n    else {\n      alert(\"Please fill up the form bellow.\");\n    }\n  }\n\n  // Set to edit mode\n  updateProject = (project) => {\n    this.setState({\n      isEditing: true,\n      currentProject: {\n        id: project.id,\n        name: project.name,\n        description: project.description\n      }\n    });\n  }\n\n  // Save updated project\n  saveProject = () => {\n    let projects = JSON.parse(localStorage.getItem('projects'));\n    const index = projects.findIndex((project) => project.id === this.state.currentProject.id);\n    if (index !== -1) {\n      projects[index] = { ...projects[index], name: this.state.currentProject.name, description: this.state.currentProject.description }\n      localStorage.setItem('projects', JSON.stringify(projects));\n      this.setState({ projects });\n    }\n    this.setState({ isEditing: false });\n  }\n\n  // Delete existing project\n  deleteProject = (id) => {\n    let projects = JSON.parse(localStorage.getItem('projects'));\n    const index = projects.findIndex((project) => project.id === id);\n    if (index !== -1) {\n      projects.splice(index, 1);\n      localStorage.setItem('projects', JSON.stringify(projects));\n      this.setState({ projects });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"contain\">\n        <header>\n          <h1>Simple time tracking application</h1>\n        </header>\n        <div className=\"container\">\n          <form onSubmit={this.state.isEditing ? this.saveProject : this.addProject}>\n            <span className=\"project-title\">Project name:</span>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.currentProject.name}\n              onChange={this.inputChange}\n              className=\"project-item\"\n              autoComplete=\"off\"\n            />\n            <span className=\"project-title\">Project description:</span>\n            <textarea\n              name=\"description\"\n              value={this.state.currentProject.description}\n              onChange={this.inputChange}\n              className=\"project-description\"\n              placeholder=\"Please enter project description...\"\n            />\n            <input type=\"submit\" value={this.state.isEditing ? 'Save' : 'Add'} className=\"submit-btn\" />\n          </form>\n          <div>\n            {this.state.projects && this.state.projects.length > 0 && (<table className=\"table-container\">\n              <thead>\n                <tr className='table-row'>\n                  <th className=\"table-head\">Project name</th>\n                  <th className=\"table-head\">Project description</th>\n                  <th className=\"table-head\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  this.state.projects.map((project) =>\n                    <tr key={project.id} className='table-row'>\n                      <td className=\"table-data\">{project.name}</td>\n                      <td className=\"table-data\">{project.description}</td>\n                      <td className=\"table-data\">\n                        <button onClick={() => this.updateProject(project)} className=\"btn\">Update</button>\n                        <button className=\"btn\"><Link to={`/project/${project.id}`}><span className=\"view-btn\">View</span></Link></button>\n                        <button onClick={() => this.deleteProject(project.id)} className=\"btn\">Delete</button>\n                      </td>\n                    </tr>\n                  )\n                }\n              </tbody>\n              <div>\n                <p>Total added projects: {this.state.projects.length}</p>\n              </div>\n            </table>)\n            }\n          </div>\n          <div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Projects;\n","import React from 'react';\nimport './ProjectView.css';\nimport { Link } from 'react-router-dom';\n\nclass ProjectView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      project: {},\n      totalHours: 0,\n      currentProjectHours: {\n        amount: '',\n        description: ''\n      }\n    }\n    this.generateId = this.generateId.bind(this);\n\n  }\n  // This will generate random ID number\n  generateId = () => {\n    return Math.floor(Math.random() * Math.floor(Math.random() * Date.now()));\n  }\n\n  // Take the value fron input forms\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    const projects = JSON.parse(localStorage.getItem('projects'));\n    const project = projects.find((project) => project.id === parseInt(id));\n    this.setState({ project });\n    this.countTotalHours(project);\n  }\n\n  countTotalHours = (project) => {\n    let totalHours = 0;\n    project.hours.map((hour) => totalHours += parseInt(hour.amount));\n    this.setState({ totalHours });\n  }\n\n  // This will update the project hours with new values\n  inputChange = (event) => {\n    event.preventDefault();\n    this.setState({\n      currentProjectHours: { ...this.state.currentProjectHours, [event.target.name]: event.target.value } // dynamically update currentProjectHours property\n    });\n  }\n\n  // This will add time to the project\n  addTime = (event) => {\n    if (this.state.currentProjectHours.amount && this.state.currentProjectHours.description) {\n      event.preventDefault();\n      let project = this.state.project;\n      project.hours.push(\n        {\n          id: this.generateId(),\n          amount: this.state.currentProjectHours.amount,\n          description: this.state.currentProjectHours.description,\n        }\n      );\n      this.updateProjectsHours(project);\n      this.setState({ project });\n    }\n    else {\n      alert(\"Please fill up the form bellow.\");\n    }\n  }\n\n  // This will update projects hours\n  updateProjectsHours = (currentProject) => {\n    let projects = JSON.parse(localStorage.getItem('projects'));\n    const index = projects.findIndex((project) => project.id === currentProject.id);\n    if (index !== -1) {\n      projects[index] = { ...projects[index], hours: currentProject.hours }\n      localStorage.setItem('projects', JSON.stringify(projects));\n      this.countTotalHours(currentProject);\n      this.setState({ projects, currentProjectHours: { amount: '', description: '' } });\n    }\n  }\n\n  // This will delete hours from project\n  deleteTime = (id) => {\n    let project = this.state.project;\n    const index = project.hours.findIndex((hour) => hour.id === id);\n    if (index !== -1) {\n      project.hours.splice(index, 1);\n      this.setState({ project });\n      this.updateProjectsHours(project);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h2>Add hours</h2>\n        </header>\n        <div className=\"container\">\n          <form onSubmit={this.addTime}>\n            <span className=\"project-title\">Amount:</span>\n            <input\n              type=\"number\"\n              name=\"amount\"\n              min=\"1\"\n              value={this.state.currentProjectHours.amount}\n              onChange={this.inputChange}\n              className=\"project-item\"\n              autoComplete=\"off\"\n            />\n            <br></br>\n            <span className=\"project-title\">Description:</span>\n            <textarea\n              name=\"description\"\n              value={this.state.currentProjectHours.description}\n              onChange={this.inputChange}\n              className=\"project-description\"\n              placeholder=\"Please enter product time description...\"\n            />\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\n          </form>\n          <div>\n            <button className=\"back-button\">\n              <Link to=\"/\">\n                <span className=\"back-button-span\">Back</span>\n              </Link>\n            </button>\n            <div>\n              <strong>Name: </strong>{this.state.project.name}\n            </div>\n            <div>\n              <strong>Description: </strong>{this.state.project.description}\n            </div>\n            <div>\n              <strong>Total hours: </strong>{this.state.totalHours}\n            </div>\n          </div>\n          <div>\n            {this.state.project.hours && this.state.project.hours.length > 0 && (<table className=\"table-container\">\n              <thead>\n                <tr className='table-row'>\n                  <th className=\"table-head\">Amount</th>\n                  <th className=\"table-head\">Description</th>\n                  <th className=\"table-head\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  this.state.project.hours.map((hour) =>\n                    <tr key={hour.id} className='table-row'>\n                      <td className=\"table-data\">{hour.amount}</td>\n                      <td className=\"table-data\">{hour.description}</td>\n                      <td className=\"table-data\">\n                        <button onClick={() => this.deleteTime(hour.id)} className=\"btn\">Delete</button>\n                      </td>\n                    </tr>\n                  )\n                }\n              </tbody>\n            </table>)}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ProjectView;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Projects from './components/projects/Projects';\nimport ProjectView from './components/project-view/ProjectView';\n\nconst Routes = props => {\n  return (\n    <>\n      <Route exact path=\"/\" component={Projects} />\n      <Route path=\"/project/:id\" component={ProjectView} />\n    </>\n  );\n}\n\nexport default Routes;\n","import './App.css';\nimport { BrowserRouter, Switch } from 'react-router-dom';\nimport Routes from './Routes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Routes />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}